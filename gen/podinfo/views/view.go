// Code generated by goa v3.0.3, DO NOT EDIT.
//
// podinfo views
//
// Command:
// $ goa gen github.com/centric-lt/k8s-101/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Podinforesult is the viewed result type that is projected based on a view.
type Podinforesult struct {
	// Type to project
	Projected *PodinforesultView
	// View to render
	View string
}

// PodinforesultView is a type that runs validations on a projected type.
type PodinforesultView struct {
	// POD ip address
	IP *string
	// POD hostname
	Hostname *string
}

var (
	// PodinforesultMap is a map of attribute names in result type Podinforesult
	// indexed by view name.
	PodinforesultMap = map[string][]string{
		"default": []string{
			"ip",
			"hostname",
		},
	}
)

// ValidatePodinforesult runs the validations defined on the viewed result type
// Podinforesult.
func ValidatePodinforesult(result *Podinforesult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePodinforesultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidatePodinforesultView runs the validations defined on PodinforesultView
// using the "default" view.
func ValidatePodinforesultView(result *PodinforesultView) (err error) {
	if result.IP == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ip", "result"))
	}
	if result.Hostname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("hostname", "result"))
	}
	return
}
