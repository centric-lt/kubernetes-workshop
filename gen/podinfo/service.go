// Code generated by goa v3.0.3, DO NOT EDIT.
//
// podinfo service
//
// Command:
// $ goa gen github.com/centric-lt/k8s-101/design

package podinfo

import (
	"context"

	podinfoviews "github.com/centric-lt/k8s-101/gen/podinfo/views"
)

// The podinfo service pulls info about current pod
type Service interface {
	// Get implements get.
	Get(context.Context) (res *Podinforesult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "podinfo"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"get"}

// Podinforesult is the result type of the podinfo service get method.
type Podinforesult struct {
	// POD ip address
	IP string
	// POD hostname
	Hostname string
}

// NewPodinforesult initializes result type Podinforesult from viewed result
// type Podinforesult.
func NewPodinforesult(vres *podinfoviews.Podinforesult) *Podinforesult {
	var res *Podinforesult
	switch vres.View {
	case "default", "":
		res = newPodinforesult(vres.Projected)
	}
	return res
}

// NewViewedPodinforesult initializes viewed result type Podinforesult from
// result type Podinforesult using the given view.
func NewViewedPodinforesult(res *Podinforesult, view string) *podinfoviews.Podinforesult {
	var vres *podinfoviews.Podinforesult
	switch view {
	case "default", "":
		p := newPodinforesultView(res)
		vres = &podinfoviews.Podinforesult{p, "default"}
	}
	return vres
}

// newPodinforesult converts projected type Podinforesult to service type
// Podinforesult.
func newPodinforesult(vres *podinfoviews.PodinforesultView) *Podinforesult {
	res := &Podinforesult{}
	if vres.IP != nil {
		res.IP = *vres.IP
	}
	if vres.Hostname != nil {
		res.Hostname = *vres.Hostname
	}
	return res
}

// newPodinforesultView projects result type Podinforesult to projected type
// PodinforesultView using the "default" view.
func newPodinforesultView(res *Podinforesult) *podinfoviews.PodinforesultView {
	vres := &podinfoviews.PodinforesultView{
		IP:       &res.IP,
		Hostname: &res.Hostname,
	}
	return vres
}
